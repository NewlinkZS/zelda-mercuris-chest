video_driver_name = select(1, ...) -- Get the rendering driver name.
shading_language_version = select(2, ...) -- Get the shading language version.
sampler_type = select(3, ...) -- Get the type of samplers to use.

texture_type = "texture2D"
if (sampler_type == "sampler2DRect") then
	texture_type = "texture2DRect"	
end

videomode {
	name = "test",
	default_window_scale = 2,
	is_shader_valid = video_driver_name == "opengl",

	vertex_source = [[

    	void main() {

      if (gl_Vertex.x < 0.0) {

        if (gl_Vertex.y < 0.0) {
          gl_Position = gl_ModelViewMatrix * vec4(-1.5, -0.8, 1.0, 1.0);
        }
        else {
          gl_Position = gl_ModelViewMatrix * vec4(-0.5, 0.8, -1.0, 1.0);
        }
      }
      else {
        if (gl_Vertex.y < 0.0) {
          gl_Position = gl_ModelViewMatrix * vec4(1.5, -0.8, 1.0, 1.0);
        }
        else {
          gl_Position = gl_ModelViewMatrix * vec4(0.5, 0.8, -1.0, 1.0);
        }
      }

//      gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
      gl_Position = gl_ModelViewMatrix * gl_Vertex;
      gl_TexCoord[0] = gl_MultiTexCoord0;
    }
	]],

	fragment_source = [[

    // Inspired from https://www.shadertoy.com/view/ltsGWn

		#define TEXEL(x,y) ]] .. texture_type .. [[(x,y)
		
		uniform ]] .. sampler_type .. [[ solarus_sampler;
    uniform int solarus_display_time;
    vec2 resolution = vec2(320.0, 240.0);
//  vec2 resolution = vec2(1.0, 1.0);

    vec4 mainImage(vec2 fragCoord) {

      vec2 q = fragCoord / resolution;
      vec2 uv = q - vec2(0.5);

      // Create a 3D point
  //    float h = 0.25;
      float h = 0.9;
      vec3 p = vec3(uv.x, uv.y - h - 1.0, uv.y - h);

      // Projecting back to 2D space
      vec2 uvm7 = p.xy / p.z;

      // Texture scaling if you need
  //    float scale = 0.4;
      float scale = 50.0;
      uvm7 *= scale;

      // Rotations if needed
      float a = (solarus_display_time / 100.0) * 0.1;
//      float a = 0.0;
      mat2 rotation = mat2(cos(a), - sin(a), sin(a), cos(a));
      uvm7 *= rotation;

      // Repeat
//      uvm7 = fract(uvm7);

      // Read background texture
      vec3 col = TEXEL(solarus_sampler, uvm7).xyz;

      // Output the color
  	    return vec4(col, 1.0);
  }

    void main() {
      gl_FragColor = mainImage(gl_FragCoord);
//      gl_FragColor = mainImage(gl_TexCoord[0].xy);
    }
	]]
}
